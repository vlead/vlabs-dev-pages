#+Title:  Virtual Labs Hosting Process
#+Author: VLEAD
#+Email: engg@vlabs.ac.in
#+DATE: [2020-01-08 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+LANGUAGE: en
#+OPTIONS: ^:nil
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: arch:headline author:t broken-links:nil c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil
#+OPTIONS: prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.2 (Org mode 9.1.9)
* Introduction
** Background
  [[http://vlab.co.in][Virtual Labs]] are online, interactive applications to
  support learning in science and engineering at the college
  level.  The Virtual Labs project is funded by the Govt. of
  India, Ministry of Human Resources and Development
  Project.

  Currently there are around 90 labs and about 900
  experiments hosted on Virtual Labs.

** Purpose
  The Virtual Labs are being built through the efforts of
  many free and open source development teams.  The source
  repositories of many of the labs can be found on the
  [[https://github.com/virtual-labs/][Github Virtual Labs]] website.  The labs are currently being
  centrally hosted on a cloud environment by the [[http://dev.vlabs.ac.in][Virtual
  Labs hosting team]] at IIIT Hyderabad (TODO: VLEAD link
  here!)

  This document defines the process that an application
  Owner needs to follow to have his/her application hosted
  on the cloud environment.
** Audience
  This document is designed to help virtual lab developers
  understand the process and their role in getting their
  labs hosted.  

** Motivation

  Centrally hosting virtual labs allows sharing of resources
  and facilitates accurate reporting of usage and
  performance in a holistic way.  It is expected that all
  applications developed in the Virtual Labs community would
  follow the hosting process documented here.

* Virtual Labs Hosting Community
** Virtual-Labs community

The virtual labs are built by a large community of
developers organized under the Github oganization
`[[https://github.com/virtual-labs][virtual-labs]]'.

** How does one become part of the virtual labs community?

Currently, only applications that have been developed using
the virtual labs development process being maintained at [[http://vlabs.iitb.ac.in/vlab/][IIT
Bombay]] are part of this community.  Please contact them or
email (TODO: provide vlead email or a VLEAD website).

** The Engineer's Forum
The [[https://github.com/virtual-labs/engineers-forum][engineers-forum]] is a project under the [[https://github.com/virtual-labs][virtual-labs]]
organization.  It is the single-point place for registering
an application, and requesting their hosting under
[[https://github.com/virtual-labs][virtual-labs]].

** Who can register and request hosting?
To register an application with virtual-labs one needs to
first register as an owner.  See the section [[Registering as
Owner]] for more details.

* Hosting
** Applications: Experiments and Labs
An application is any project that can be individually
hosted.  An application is a single hosting unit.
Currently, there are two kinds of applications: experiments,
and labs.

** Types of labs

A lab is of two types:

  1. *Container*: it merely holds together already existing
     experiments and some wrapper content like a Title,
     Introduction etc.

  2. *Monolithic*: it contains the source code of all its
     experiments.  Experiments in a monolithic lab are not
     available for sharing by other labs. 

** What is Hosting?
Hosting is a service that takes the sources of an
application and hosts it on a web server.  The result of a
successful hosting is a URL of the application.

** What the virtual labs hosting service provides
   - 1. Infrastructure :: The application and its
        dependencies will be hosted on a common cloud
        environment so that Owners do not need to worry
        about building their own cloud infrastructure.
   
   - 2. Availability :: The application will be available on
        the web 24/7.
   
   - 3. Monitoring :: The usage and performance of the application
                      will be monitored and the Owner will be
                      alerted about any performance
                      bottlenecks.

** What hosting does not provide

   - 1. Testing :: The application will be treated by the
                   Hosting Team as a black box and will be
                   hosted `as is' after instrumenting it for
                   analytics.  *The application's source
                   code will not be tested by the Hosting
                   Team in any way whatsoever!* The
                   application owner is responsible for
                   ensuring that application performs as
                   intended.  The Hosting Team will only
                   request the Owner to confirm that 
                   that the application's web pages
                   load correctly. 

   - 2. Bug fixing :: The application may have bugs.  Any
                      bug fixes or enhancements or
                      implementation of the application will
                      be done by the Owner.  The Hosting
                      Team is not responsible for bugs of
                      any kind in the application.  The
                      hosting team will, however, monitor
                      the performance of the application lab
                      and alert the user about poor
                      performance.  If the performance or
                      security of the application is
                      untenable, then the Hosting Team may
                      suspend the application. 

   - 3. Approvals :: Any approvals for registration or
                     hosting are the responsibility of the
                     Owner.  E.g., quality checks may be
                     needed on the application before it is
                     approved for hosting.  The hosting team
                     has no way of obtaining these
                     approvals.

** Who is managing the hosting?
Under the virtual-labs project, hosting is a service
available to the virtual-lab community.  Applications are
being hosted on a common cloud platform.  The hosting
process is being managed by the hosting team at VLEAD, IIIT
Hyderabad, India.  The hosting team is
[[https://github.com/orgs/virtual-labs/teams/hosting-team][@virtual-labs/hosting-team]] on Github.

** Is the hosting free?
It is, if the Owner's affiliated College or University is
part of the Virtual Labs consortium or partner colleges and
universities.  Hosting costs money (we need to pay a
commercial cloud provider).  For this reason, the free
hosting is limited.  There is no paid hosting service at
present.

** Hosting terminology

   - 1. Building :: The process of converting source code to
                    executable code.

   - 2. Hosting :: The process of doing a build and
                   installing the executable onto  a virtual
                   labs server.   

   - 3. Deployment :: Another name for hosting

   - 4. Hosting Team :: the Virtual Labs team responsible
        for hosting an application.  It is identified by its github
        team mentioned as [[https://github.com/orgs/virtual-labs/teams/hosting-team][@virtual-labs/hosting-team]]

   - 5. [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]] :: An open [[https://github.com][GitHub]] issues forum where
        all requests related to application registration and hosting
        are made.

   - 7. Application  :: The software entity to be hosted.
        Identified by the issue id of its registration
        request on the [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]].

   - 8. Repository :: A GitHub project that holds the source
                      code of the application.  The
                      repository is identified by its *url*.

   - 9. Owner    :: The person or team taking responsibility
                    for the application.  An Owner is
                    identified by a Github username.  The
                    virtual labs Hosting Team will use this
                    username to communicate with the owner.
                    An owner must first register with the
                    hosting team.

   - 10. Request :: An issue on the [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]] created
                    to either register or host an
                    application.  Each request is identified
                    by its github issue id.

** Source code and Hosting
The source code is expected to be available on a git
repository (typically on Github or Gitlab).  The hosting
team will need read (but not write) permissions to the
application repository.

The hosting process will clone the repository and instrument
it in order to add UI and other services like analytics.  

** Hosting but no testing or debugging of Application
The hosting team will neither test nor debug the
application's code.  However, if there is a problem in the
build process, it will mark the hosting request as *Failed*
and alert the Owner.

In addition, the hosting team will monitor an application
and alert the Owner if the application is consuming too many
resources.  Applications consuming unreasonable resources
will be suspended and the owner alerted.

* Registering as Owner

A Github user wishing to use the hosting service must
register with the Hosting Team.  This is needed by the
Hosting team to verify the bona fides of the person claiming
to be the owner.

** Structure of the Owner Registration Request

  1. A github username and profile.

  2. The profile should indicate the user's university
     college affiliation.  The college should already be
     part of the virtual labs community.

  3. The profile should include an email. 

A team in a college working on virtual labs may want to
create a separate user id or create a team under the
[[https://github.com/virtual-labs][virtual-labs]] organization.


** Owner Registration Workflow

   1. Owner fills the owner registration form (TODO: create
      form and add link to it).  

   2. The Hosting Team contacts the owner by email and/or
      by phone to establish the credentials of the owner.

   3. The Hosting Team adds the github user to its database
      of registered owners.

* Hosting life cycle of an Application

The application's hosting life cycle consists of the
following types of events:

|----------------+-----------+--------------|

| Event          | Frequency | Initiator    |
|----------------+-----------+--------------|
| Registration   | Once      | Owner        |
|----------------+-----------+--------------|
| Hosting        | Multiple  | Owner        |
|----------------+-----------+--------------|
| Update         | Mutiple   | Owner        |
|----------------+-----------+--------------|
| Deregistration | Once      | Owner        |
|----------------+-----------+--------------|
| Alert          | Multiple  | Hosting Team |
|----------------+-----------+--------------|
| Suspension     | Multiple  | Owner or     |
|                |           | Hosting Team |
|----------------+-----------+--------------|

Each event is initiated by the owner and filed as an [[https://github.com/virtual-labs/engineers-forum/issues/new/choose][issue]]
on the [[https://github.com/virtual-labs/engineers-forum][engineers-forum]].  

* Registering an Application

   The registration of an application defines the application
   as a hostable entity and makes it available to the
   virtual-labs organization to host it.

   Information in the registration issue includes the
   following:

   1. Name of the Application:

   2. The owners of the application (by default, at least the github
	  user-name filing the registration request).   

   3. The URL of the source code repository of the application.


** Identity of the application
   An application is identified by its registration issue id
   on [[https://gitlab.com/virtual-labs/engineers-forum]].  This
   becomes the application id henceforth and id used in
   hosting or registration update requests to refer to this
   registration.
   
** Owner(s) of the application
   The github user-name(s) associated with the application.
   Only owners of an application may request issue requests
   relating to the hosting lifecycle of an application.

** Source repository (Repo) of an Application
   An application's source code resides in a repository.
   The mapping of an application to its repository may be
   changed.

** Registration  Workflow 

|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|
|     |              |                         |              |              |                         |                 |
| No. | Issue        | Pre-condition           | Actor        | Action       | Supporting Info         | Actor changes   |
|     | status       |                         |              | taken by     | provided by Actor       | issue Status to |
|     |              |                         |              | Actor        |                         |                 |
|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|
|  1. | n/a          |                         | Owner        | new issue    | Hosting request         | *Open*          |
|     |              |                         |              | (Suspension) | paramaters              | (automatically  |
|     |              |                         |              |              |                         | done by Github) |
|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|
|  2. | *Open*       | Registration request is | Hosting Team | reply        | Reasons why request is  | *Failed*        |
|     |              | ill-formed              |              |              | ill-formed              |                 |
|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|
|  3. | *Open*       | Registration request is | Hosting Team | reply        | Acknowledgement         | *Registered*    |
|     |              | well-formed             |              |              | of successful           |                 |
|     |              |                         |              |              | registation  along with |                 |
|     |              |                         |              |              | application id          |                 |
|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|
|  4. | *Failed*     |                         | Owner        |              |                         | *Closed*        |
|     | or           |                         |              |              |                         |                 |
|     | *Registered* |                         |              |              |                         |                 |
|-----+--------------+-------------------------+--------------+--------------+-------------------------+-----------------|

* Making a Hosting Request
** Hosting request
A hosting request is necessary before a registered
application can be hosted.

** Raising a Hosting Request
A hosting request is made by creating an issue using the
[[https://github.com/virtual-labs/engineers-forum/issues/new?assignees=&labels=Hosting&template=hosting-request.md&title=Hosting+Request+for+<Hosting+Unit+or+Lab+Name>][hosting request template]].  The hosting issue will be a
single source of truth for that hosting request.  All
communication related to the hosting will be recorded on the
hosting request.  So it is best for the Owner to [[https://help.github.com/en/enterprise/2.20/user/github/receiving-notifications-about-activity-on-github/subscribing-to-and-unsubscribing-from-notifications][subscribe
to this issue]] to receive notifications when the Owner's
request is handled.

** Structure of a hosting request
A hosting request has the following information:

  1. The application registration id 

  2. A git tag that identifies the version of the source
     repository.

** Hosting workflow
    
    1. The Owner raises a hosting request as an issue.  The
       owner is expected to [[https://help.github.com/en/enterprise/2.20/user/github/receiving-notifications-about-activity-on-github/subscribing-to-and-unsubscribing-from-notifications][subscribe to the issue]] to
       follow responses to the request.

    2. The Hosting team examines the request.  If the
       request is ill-formed or is not from a lab owner, or
       the build process fails, for example, due to missing
       dependencies, a reply to the issue is added.  The
       issue is labeled as *Failed*.

    3. On a successful hosting, the Hosting Team responds to
       the hosting request with the url of the hosted lab.
       It marks the request issue *Hosted*.

    4. For a request marked *Failed*, the owner closes the
       current request by marking it *Closed*, fixes any
       bugs in the sources, and raises a new [[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting
       request]]. 

    5. For a request marked *Hosted*, the owner verifies the
       hosted link and checks if the lab opens correctly.
       If the hosting is not as expected, the owner responds
       on the same issue, explaining the problem with the
       hosting and labels the issue as *Reopened*.

    9. When an issue is *Reopened*, the hosting team will
       host the repository and branch/tag as specified in
       the hosting request initially.  However, if the Owner
       has specifically requested a revert, the previous
       successful hosting will be restored.  The issue will
       be labelled as *Reverted*.

    10. If the owner wants the application restored to any
        earlier tag other than the last one, a new '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting
        request]]' will need to be raised to get the unit
        hosted.

    11. Owner will close a hosting request issue by changing
        its status to *Closed* when the issue is labelled as
        *Hosted*, *Reopened* or *Reverted*. 


The table below summarises the actions taken by the two
actors (Owner and Hosting Team) and the pre-conditions
driving those actions during Hosting Workflow.

|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|     |            |                               |              |           |                            |                 |
| No. | Issue      | Pre-condition                 | Actor        | Action    | Supporting Info            | Actor changes   |
|     | status     |                               |              | taken by  | provided by Actor          | issue Status to |
|     |            |                               |              | Actor     |                            |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  1. | n/a        | Application is registered     | Owner        | new issue | Hosting request            | *Open*          |
|     |            |                               |              |           | paramaters                 | (automatically  |
|     |            |                               |              |           |                            | done by Github) |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  2. | *Open*     | Hosting request is            | Hosting Team | reply     | Reasons why request is     | *Failed*        |
|     |            | ill-formed                    |              |           | ill-formed                 |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  3. | *Open*     | Request is well-formed  but   | Hosting Team | reply     | Reasons why build failed   | *Failed*        |
|     |            | Build process has failed      |              |           |                            |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  4. | *Open*     | Hosting has succeeded         | Hosting Team | reply     | URL of hosted application  | *Hosted*        |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  5. | *Failed*   |                               | Owner        | reply     | Acknowledgement            | *Closed*        |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  6. | *Hosted*   | Hosting is satisfactory       | Owner        | reply     | Acknowledgement            | *Closed*        |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  7. | *Hosted*   | Hosting not satisfactory      | Owner        | reply     | Reason why application     | *Reopened*      |
|     |            |                               |              |           | hosting is unsatisfactory. |                 |
|     |            |                               |              |           |                            |                 |
|     |            |                               |              |           | Whether revert to          |                 |
|     |            |                               |              |           | previous version           |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  8. | *Reopened* | Owner reply specifies revert  | Hosting Team | reply     | URL of hosted application  | *Reverted*      |
|     |            | and reverted version rehosted |              |           |                            |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
|  9. | *Reopened* | Owner reply does not          | Hosting Team | reply     | URL of hosted application  | *Hosted*        |
|     |            | specify revert and            |              |           |                            |                 |
|     |            | application is rehosted       |              |           |                            |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
| 10. | *Reopened* | Owner reply does not          | Hosting Team | reply     | Reasons why build failed   | *Failed*        |
|     |            | specify revert and            |              |           |                            |                 |
|     |            | application hosting           |              |           |                            |                 |
|     |            | is unsuccessful               |              |           |                            |                 |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|
| 11. | *Reverted* |                               | Owner        | reply     |                            | *Closed*        |
|-----+------------+-------------------------------+--------------+-----------+----------------------------+-----------------|

** Labels and Status of a Hosting Request

    At any given time a hosting issue should be marked with
    only one of the following labels. To change the label of
    an issue, the current label of the issue should be
    unchecked and the new label should be checked.

    *Hosted* : This label indicates that the hosting request
    has been successful and the hosted url has been shared
    in the hosting request issue. This label is used only by
    the hosting team.
   
    *Failed* : This label indicates that the hosting request
    has not been successful. This label is used only by the
    hosting team.

    *Reopened* : This label is used by the Owner to indicate
    that the hosting url provided on a successful hosting of
    the hosting unit is not passing the validation.
    
    *Reverted* : This label indicates that the hosting
    request has been successfully reverted to the previous
    hosted image. This label is used only by the hosting
    team.

    Apart from the above mentioned labels a hosting request
    issue can either be in a closed or open status as
    provided by GitHub. 

    *Open* : This status indicates that a new request issue
    has been raised and is waiting for the services of the
    hosting team.  Github ensures that all issues are open
    when newly created.

    *Closed*: This status indicates that a request has been
    serviced or resolved by the hosting team.  Only a
    *Hosted*, *Reverted* or *Failed* issue may be closed.

** Flow Diagram of the Hosting Process

   The flow diagram depicting lifecycle of a hosting request is below:

 TODO:  Revise it to reflect the current workflow.
  
  #+NAME:   fig:flowchart
  [[file:../images/hosting-process.png]]

  /[[https://drive.google.com/file/d/1gnG5Z3kkwXXZxT-zyB2CB9uZCgqAcdjE/view?usp=sharing][edit image]]/

** Roles and Responsibilities

TODO:  Update this table based on the hosting protocol
defined here.  Make the table in org, not a png.

 #+NAME:   fig:flowchart
  [[file:../images/hosting-process-table.png]]

  /[[https://docs.google.com/drawings/d/1JfrZerBuMvTBFFfbhiMKKmePMNJ0GsbfTnsnvRbCLZw/edit][edit table]]/
 

* Making an Update Request
** Update request
An update request is necessary to change the name of the
application, its owners or source repository. 

** Raising an Update Request

An owner raises an update request whenver he/she wishes to
update attributes of an application.

** The structure of the Update Request
The information in an update request consists of the
application id, and values of the following (if any):
   1. Name of the Application: 
   2. New Owners to be added: 
   3. Old Owners to be removed:
   4. Updated Repository URL:

** Update Workflow

|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|
|     |           |                    |              |               |                        |                 |
| No. | Issue     | Pre-condition      | Actor        | Action        | Supporting Info        | Actor changes   |
|     | status    |                    |              | taken by      | provided by Actor      | issue Status to |
|     |           |                    |              | Actor         |                        |                 |
|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|
|  1. | n/a       |                    | Owner        | new issue     | Update request         | *Open*          |
|     |           |                    |              | (Registation) | paramaters             | (automatically  |
|     |           |                    |              |               |                        | done by Github) |
|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|
|  2. | *Open*    | Update request is  | Hosting Team | reply         | Reasons why request is | *Failed*        |
|     |           | ill-formed         |              |               | ill-formed             |                 |
|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|
|  3. | *Open*    | Update  request is | Hosting Team | reply         | Acknowledgement        | *Updated*       |
|     |           | well-formed        |              |               | of successful          |                 |
|     |           |                    |              |               | update                 |                 |
|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|
|  4. | *Failed*  |                    | Owner        |               |                        | *Closed*        |
|     | or        |                    |              |               |                        |                 |
|     | *Updated* |                    |              |               |                        |                 |
|-----+-----------+--------------------+--------------+---------------+------------------------+-----------------|

* Deregistering an Application

   The deregistration indicates that the owner is no longer
   interested in having his/her application hosted.  This
   could perhaps be because the owner is no longer
   maintaining the application or for any other reason.

** Structure of the Deregistration Request

   Information for deregistration issue includes the
   following:

   1. Application Id:

   2. Reason why application is being deregistered:

** Deregistration Workflow

|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|
|     |                |                           |              |               |                        |                 |
| No. | Issue          | Pre-condition             | Actor        | Action        | Supporting Info        | Actor changes   |
|     | status         |                           |              | taken by      | provided by Actor      | issue Status to |
|     |                |                           |              | Actor         |                        |                 |
|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|
|  1. | n/a            |                           | Owner        | new issue     | Hosting request        | *Open*          |
|     |                |                           |              | (Registation) | paramaters             | (automatically  |
|     |                |                           |              |               |                        | done by Github) |
|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|
|  2. | *Open*         | Deregistration request is | Hosting Team | reply         | Reasons why request is | *Failed*        |
|     |                | ill-formed                |              |               | ill-formed             |                 |
|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|
|  3. | *Open*         | Deregistration request is | Hosting Team | reply         | Acknowledgement        | *Deregistered*  |
|     |                | well-formed               |              |               | of successful          |                 |
|     |                |                           |              |               | deregistation          |                 |
|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|
|  4. | *Failed*       |                           | Owner        |               |                        | *Closed*        |
|     | or             |                           |              |               |                        |                 |
|     | *Deregistered* |                           |              |               |                        |                 |
|-----+----------------+---------------------------+--------------+---------------+------------------------+-----------------|


* Alerting an Owner about the Application
Occasionally, the Hosting Team may alert an Owner about
his/her application.  The alert is currently of the
following types:

   Suggestion: A friendly tip on how to improve the
    performance of the application.

Other types of alerts may be added in the future. 


** Structure of an alert
The alert consists of the following fields:
  1. Id of the application:
  2. Additional information about alert:

** Alert Workflow 

|-----+--------+----------------------------+--------------+-----------+-----------------------+-----------------|
|     |        |                            |              |           |                       |                 |
| No. | Issue  | Pre-condition              | Actor        | Action    | Supporting Info       | Actor changes   |
|     | status |                            |              | taken by  | provided by Actor     | issue Status to |
|     |        |                            |              | Actor     |                       |                 |
|-----+--------+----------------------------+--------------+-----------+-----------------------+-----------------|
|  1. | n/a    | Scope  for easy            | Hosting Team | new issue | Suggestion parameters | *Open*          |
|     |        | improvement in performance |              | (Alert)   |                       |                 |
|     |        | or security                |              |           |                       |                 |
|-----+--------+----------------------------+--------------+-----------+-----------------------+-----------------|
|  3. | *Open* |                            | Owner        | reply     | Acknowledgement       | *Closed*        |
|-----+--------+----------------------------+--------------+-----------+-----------------------+-----------------|

* Suspending an Application
When an application is suspended it is no longer hosted.  An
application may be suspended if it is found that the
application has a serious security or performance flaw.  A
suspension may be initiated either by an owner or the
Hosting Team.

** Structure of an Suspension Request

A suspension request consists of the following fields

   1. Application Id: #nnn (Issue id of application)
   2. Reason for suspension:  Text
   3. Owner: @user-name (in case suspension is initiated by Hosting Team)


** Suspension  Workflow (initiated by Owner)

|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|
|     |             |               |              |               |                        |                 |
| No. | Issue       | Pre-condition | Actor        | Action        | Supporting Info        | Actor changes   |
|     | status      |               |              | taken by      | provided by Actor      | issue Status to |
|     |             |               |              | Actor         |                        |                 |
|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|
|  1. | n/a         |               | Owner or     | new issue     | Suspension  request    | *Open*          |
|     |             |               |              | (Registation) | paramaters             | (automatically  |
|     |             |               |              |               |                        | done by Github) |
|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|
|  2. | *Open*      | Request is    | Hosting Team | reply         | Reasons why request is | *Failed*        |
|     |             | ill-formed    |              |               | ill-formed             |                 |
|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|
|  3. | *Open*      | Request is    | Hosting Team | reply         | Acknowledgement        | *Suspended*     |
|     |             | well-formed   |              |               | of successful          |                 |
|     |             |               |              |               | suspension             |                 |
|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|
|  4. | *Failed*    |               | Owner        |               |                        | *Closed*        |
|     | or          |               |              |               |                        |                 |
|     | *Suspended* |               |              |               |                        |                 |
|-----+-------------+---------------+--------------+---------------+------------------------+-----------------|

** Suspension  Workflow (initiated by Hosting Team)

|-----+-------------+---------------+--------------+--------------+---------------------+-----------------|
|     |             |               |              |              |                     |                 |
| No. | Issue       | Pre-condition | Actor        | Action       | Supporting Info     | Actor changes   |
|     | status      |               |              | taken by     | provided by Actor   | issue Status to |
|     |             |               |              | Actor        |                     |                 |
|-----+-------------+---------------+--------------+--------------+---------------------+-----------------|
|  1. | n/a         |               | Hosting Team | new issue    | Suspension  request | *Suspended*     |
|     |             |               |              | (Suspension) | paramaters          |                 |
|     |             |               |              |              |                     |                 |
|-----+-------------+---------------+--------------+--------------+---------------------+-----------------|
|  4. | *Suspended* |               | Owner        |              |                     | *Closed*        |
|-----+-------------+---------------+--------------+--------------+---------------------+-----------------|

Once an application is suspended, it can only be rehosted
with a fresh hosting request. 

* Build Process
  Once the hosting request is processed, it is time to build
  the application

  /Build/ is the process of translating and compiling
  source files to an executable or hostable web
  application.
** Files and parameters
  To build an application, the hosting team will look for
  two files at the top level of the application's repository
  and try to construct the values of three variables.

    The files searched for at the repository source's top
    level are:

     1. =descriptor.json= :: This file, called the
          deployment descriptor, contains a =json= data
          object specifying values of various parameters
          needed by the build.  It is described [[Deployment Descriptor][below]].

     2. =makefile= :: this is the file on which the default
                      build command is run. 
         
** Deployment Descriptor
The hosting of an application is driven by the information
in its deployment descriptor.  The deployment information
must be present in a file called =descriptor.json= at the
top-level of the application's source repository.  This
descriptor has additional information.

   The descriptor contains multiple fields.
   1. Name of the Application
   2. Meta data
   3. Build paramaters (command, build directory, source
	  directory, software dependencies)

A formal specification of the descriptor's structure is given
here. (TODO: add link to descriptor)

** Dependencies
    If the application depends on other software (like
    databases, compilers, etc.), they need to be specified
    them in the =dependencies= field of the deployment
    descriptor.

** The build workflow

These steps are implemented by the Hosting Team. 

     1. If the =descriptor.json= is present, read its
        parameters and collect values of =build-cmd=,
        =src-dir=, =build-dir= and =dependencies=.

     2. Install the dependencies if any.

     3. Run the =build-cmd=.

     4. Copy the  =build-dir= to a hosting server's root
        directory. 

In this process, *the hosting team will not modify the
source files of an application or its source repository in
any way*.
   
* Request Fields and Templates
|----------------+-----------------------+------------------+-----------+---+---|
| Request        | Fields                | Field Type       | Presence  |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Registration   |                       |                  |           |   |   |
|                | Name of Application   | String           | mandatory |   |   |
|                | Type                  | {Lab, Exp}       | mandatory |   |   |
|                | Owner                 | User-id          | mandatory |   |   |
|                | Repo                  | URL              | mandatory |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Update         |                       |                  |           |   |   |
|                | Application id        | #IssueNumber     | mandatory |   |   |
|                | (revised) Name of Exp | String           | optional  |   |   |
|                | Add owners            | List of user-ids | optional  |   |   |
|                | Remove owners         | List of user-ids | optional  |   |   |
|                | (revised) repo url    |                  | optional  |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Hosting        |                       |                  |           |   |   |
|                | Application  Id       | #IssueNumber     | mandatory |   |   |
|                | Tag                   | String           | mandatory |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Deregistration |                       |                  |           |   |   |
|                | Application Id        | #IssueNumber     | mandatory |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Alert          |                       |                  |           |   |   |
|                | Application Id        | #IssueNumber     | mandatory |   |   |
|                | Description           | Text             | mandatory |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
| Suspension     |                       |                  |           |   |   |
|                | Application Id        | #IssueNumber     | mandatory |   |   |
|                | Description           | Text             | mandatory |   |   |
|----------------+-----------------------+------------------+-----------+---+---|
  
** COMMENT Confirming the success or failure of hosting

   If the hosting is successful, the hosting issue will be
   marked as successfu  runs into trouble 
   The hosting process will result in a deployment with an
   accessible url.  The responsibility of testing the
   deployments will lie with the repository owner. The
   hosting team will be responsible for providing the link
   to the deployment.  The hosting team will not provide any
   testing environment. The repository owner will be
   responsible for ensuring that the hosting unit works as
   expected in their own specific testing environments.

* COMMENT Central Hosting Data  
  
  The following information will be stored at a central
  place for a quick reference by the hosting team:

    1. Hosting unit name

    2. Repository URL

    3. Currently hosted Branch/Tag

    4. Previously hosted Branch/Tag

    5. Date/Time of hosting

    Please follow the [[https://drive.google.com/open?id=1WXJA_1QkLg-5S0YYBRKyhEXwOgTSbKvm972Fy-thCUc][link]] for the Central Hosting Data.

* Tagging conventions

   We recommend using [[https://semver.org/][Semantic Versioning]] to tag
   repositories using the version number convention.  Each
   version is a combination of three numbers
   (MAJOR.MINOR.PATCH) separated by dots.  The changes to
   these numbers represent the following:
   
   1. MAJOR: A change incompatible with previous versions.
  
   2. MINOR: A backward compatible new feature.
 
   3. PATCH: A backward compatible bug fix.
  

* FAQ for Virtual Lab developers
  
 *Why should I use the Hosting Service?* 

  If you're building a virtual lab under the MHRD virtual
  labs project, you are strongly encouraged to host your
  application on the common cloud.  Your application will
  enjoy *high availability* and it will save you the trouble
  of trying to host it yourself.  Your application will
  take advantage of other services like *analytics* about
  the users and usage patterns of your application

  *Will hosting on the central platform team help me improve
  my application's performance?*
 
  Quite likely.  Virtual Labs employs commercial grade
  hosting services. The hosting plans are continuously
  negotiated to make them cheaper and faster.  The Virtual
  Labs hosting team will not improve your code for better
  performance.  However, it will provide you guidelines and
  actionable performance improvement advice if it notices
  poor performance of your hosted unit.

  *Does Hosting Service add a UI to my webpages?*

  Hosting service does not alter your code in any way but
  may change the UI to match a standard theme *if* you use
  the standard development process specified by [[http://vlabs.iitb.ac.in/][IIT Bombay
  Virtual Labs team]].   

  *Does the CPE team test my application for correctness as part of
  hosting?* 

  No.  We are not in a position to understand the semantics
  of your application and therefore can not test except to ensure
  that your application is correctly /hosted/.

  *Will the CPE team tell me about broken links as part of
  hosting?*

  No. Your code is a complete black box for the hosting
  team.  You are responsible for ensuring the completeness
  and correctness of your code and deployment.
